

<html><head><meta http-equiv='Content-Type' content='text/html; charset=iso-8859-2'><title>SPOJ submission 12602326 (C++ 4.3.2)</title><style type='text/css'><!--/* GeSHi (c) Nigel McNie 2004 (http://qbnz.com/highlighter) */
.cpp  {color: #000066; border: 1px solid #d0d0d0; background-color: #f0f0f0;}
.cpp a:link {color: #000060;}
.cpp a:hover {background-color: #f0f000;}
.cpp .head {font-family: Verdana, Arial, sans-serif; color: #808080; font-size: 70%; font-weight: bold; background-color: #f0f0ff; border-bottom: 1px solid #d0d0d0; padding: 2px;}
.cpp .imp {font-weight: bold; color: red;}
.cpp .kw1 {color: #0000ff;}
.cpp .kw2 {color: #0000ff;}
.cpp .kw3 {color: #0000dd;}
.cpp .kw4 {color: #0000ff;}
.cpp .co1 {color: #ff0000;}
.cpp .co2 {color: #339900;}
.cpp .coMULTI {color: #ff0000; font-style: italic;}
.cpp .es0 {color: #666666; font-weight: bold;}
.cpp .br0 {color: #000000;}
.cpp .st0 {color: #666666;}
.cpp .nu0 {color: #0000dd;}
.cpp .me1 {color: #00eeff;}
.cpp .me2 {color: #00eeff;}
--></style></head><body><pre class="cpp"><div class="head">SPOJ submission 12602326 (C++ 4.3.2) <a href='/files/src/save/12602326'>plaintext</a> <a href='/status/BUGLIFE,samprit/'>list</a>. Status: AC, problem BUGLIFE, contest SPOJ. By samprit (Samprit Biswas), 2014-10-11 19:45:40.</div><ol><li><div class="de1"><span class="co2">#include &lt;iostream&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;cstdio&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;string&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;queue&gt;</span></div></li><li class="li2"><div class="de2"><span class="co2">#include &lt;stack&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;algorithm&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;cmath&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;map&gt;</span></div></li><li><div class="de1"><span class="co2">#include &lt;list&gt;</span></div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1"><span class="co2">#define ll long long</span></div></li><li><div class="de1"><span class="co2">#define ull unsigned long long</span></div></li><li><div class="de1">&nbsp;</div></li><li><div class="de1"><span class="kw2">using</span> <span class="kw2">namespace</span> std;</div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1"><span class="co1">// This class represents a directed graph using adjacency list representation</span></div></li><li><div class="de1">class Graph</div></li><li><div class="de1"><span class="br0">&#123;</span></div></li><li><div class="de1">    <span class="kw2">public</span>:</div></li><li class="li2"><div class="de2">        <span class="kw4">int</span> V;    <span class="co1">// No. of vertices</span></div></li><li><div class="de1">        list&lt;int&gt; *adj;    <span class="co1">// Pointer to an array containing adjacency lists</span></div></li><li><div class="de1">        <span class="kw4">bool</span> *visited;</div></li><li><div class="de1">        <span class="kw4">int</span> *dis;</div></li><li><div class="de1">&nbsp;</div></li><li class="li2"><div class="de2">        Graph<span class="br0">&#40;</span><span class="kw4">int</span> V<span class="br0">&#41;</span>;  <span class="co1">// Constructor</span></div></li><li><div class="de1">        <span class="kw4">void</span> addEdge<span class="br0">&#40;</span><span class="kw4">int</span> v, <span class="kw4">int</span> w<span class="br0">&#41;</span>; <span class="co1">// function to add an edge to graph</span></div></li><li><div class="de1">        <span class="kw4">bool</span> BFS<span class="br0">&#40;</span><span class="kw4">int</span> s<span class="br0">&#41;</span>;  <span class="co1">// prints BFS traversal from a given source s</span></div></li><li><div class="de1">        <span class="kw4">void</span> delEdge<span class="br0">&#40;</span><span class="kw4">int</span> v<span class="br0">&#41;</span>;</div></li><li><div class="de1"><span class="br0">&#125;</span>;</div></li><li class="li2"> </li><li><div class="de1">Graph::<span class="me2">Graph</span><span class="br0">&#40;</span><span class="kw4">int</span> V<span class="br0">&#41;</span></div></li><li><div class="de1"><span class="br0">&#123;</span></div></li><li><div class="de1">    this-&gt;V = V;</div></li><li><div class="de1">    adj = <a href="http://www.opengroup.org/onlinepubs/009695399/functions/new.html"><span class="kw3">new</span></a> list&lt;int&gt;<span class="br0">&#91;</span>V<span class="br0">&#93;</span>;</div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1">    <span class="co1">// Mark all the vertices as not visited</span></div></li><li><div class="de1">    visited = <a href="http://www.opengroup.org/onlinepubs/009695399/functions/new.html"><span class="kw3">new</span></a> <span class="kw4">bool</span><span class="br0">&#91;</span>V<span class="br0">&#93;</span>;</div></li><li><div class="de1">    <span class="kw1">for</span><span class="br0">&#40;</span><span class="kw4">int</span> i = <span class="nu0">0</span>; i &lt; V; i++<span class="br0">&#41;</span></div></li><li><div class="de1">        visited<span class="br0">&#91;</span>i<span class="br0">&#93;</span> = <span class="kw2">false</span>;</div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1">    dis = <a href="http://www.opengroup.org/onlinepubs/009695399/functions/new.html"><span class="kw3">new</span></a> <span class="kw4">int</span><span class="br0">&#91;</span>V<span class="br0">&#93;</span>;</div></li><li><div class="de1">    dis<span class="br0">&#91;</span><span class="nu0">0</span><span class="br0">&#93;</span> = <span class="nu0">0</span>;</div></li><li><div class="de1"><span class="br0">&#125;</span></div></li><li> </li><li class="li2"><div class="de2"><span class="kw4">void</span> Graph::<span class="me2">addEdge</span><span class="br0">&#40;</span><span class="kw4">int</span> v, <span class="kw4">int</span> w<span class="br0">&#41;</span></div></li><li><div class="de1"><span class="br0">&#123;</span></div></li><li><div class="de1">    adj<span class="br0">&#91;</span>v<span class="br0">&#93;</span>.<span class="me1">push_back</span><span class="br0">&#40;</span>w<span class="br0">&#41;</span>; <span class="co1">// Add w to v&acirc;€™s list.</span></div></li><li><div class="de1">    adj<span class="br0">&#91;</span>w<span class="br0">&#93;</span>.<span class="me1">push_back</span><span class="br0">&#40;</span>v<span class="br0">&#41;</span>; </div></li><li><div class="de1"><span class="br0">&#125;</span></div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1"><span class="kw4">void</span> Graph::<span class="me2">delEdge</span><span class="br0">&#40;</span><span class="kw4">int</span> v<span class="br0">&#41;</span></div></li><li><div class="de1"><span class="br0">&#123;</span></div></li><li><div class="de1">    list&lt;int&gt;::<span class="me2">iterator</span> i;</div></li><li><div class="de1">    <span class="kw1">for</span><span class="br0">&#40;</span>i = adj<span class="br0">&#91;</span>v<span class="br0">&#93;</span>.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>; i != adj<span class="br0">&#91;</span>v<span class="br0">&#93;</span>.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>; ++i<span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li class="li2"><div class="de2">        adj<span class="br0">&#91;</span>*i<span class="br0">&#93;</span>.<span class="me1">remove</span><span class="br0">&#40;</span>v<span class="br0">&#41;</span>;</div></li><li><div class="de1">    <span class="br0">&#125;</span></div></li><li><div class="de1">    adj<span class="br0">&#91;</span>v<span class="br0">&#93;</span>.<span class="me1">clear</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div></li><li><div class="de1"><span class="br0">&#125;</span></div></li><li> </li><li class="li2"><div class="de2"><span class="kw4">bool</span> Graph::<span class="me2">BFS</span><span class="br0">&#40;</span><span class="kw4">int</span> s<span class="br0">&#41;</span></div></li><li><div class="de1"><span class="br0">&#123;</span></div></li><li>    </li><li><div class="de1">    <span class="co1">// Create a queue for BFS</span></div></li><li><div class="de1">    list&lt;int&gt; queue;</div></li><li class="li2"> </li><li><div class="de1">    <span class="co1">// Mark the current node as visited and enqueue it</span></div></li><li><div class="de1">    visited<span class="br0">&#91;</span>s<span class="br0">&#93;</span> = <span class="kw2">true</span>;</div></li><li><div class="de1">    queue.<span class="me1">push_back</span><span class="br0">&#40;</span>s<span class="br0">&#41;</span>;</div></li><li> </li><li class="li2"><div class="de2">    <span class="co1">// 'i' will be used to get all adjacent vertices of a vertex</span></div></li><li><div class="de1">    list&lt;int&gt;::<span class="me2">iterator</span> i;</div></li><li> </li><li><div class="de1">    <span class="kw1">while</span><span class="br0">&#40;</span>!queue.<span class="me1">empty</span><span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#41;</span></div></li><li><div class="de1">    <span class="br0">&#123;</span></div></li><li class="li2"><div class="de2">        <span class="co1">// Dequeue a vertex from queue and print it</span></div></li><li><div class="de1">        s = queue.<span class="me1">front</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div></li><li><div class="de1">        <span class="co1">//cout &lt;&lt; s &lt;&lt; &quot; &quot;;</span></div></li><li><div class="de1">        queue.<span class="me1">pop_front</span><span class="br0">&#40;</span><span class="br0">&#41;</span>;</div></li><li> </li><li class="li2"><div class="de2">        <span class="co1">// Get all adjacent vertices of the dequeued vertex s</span></div></li><li><div class="de1">        <span class="co1">// If a adjacent has not been visited, then mark it visited</span></div></li><li><div class="de1">        <span class="co1">// and enqueue it</span></div></li><li><div class="de1">        <span class="kw1">for</span><span class="br0">&#40;</span>i = adj<span class="br0">&#91;</span>s<span class="br0">&#93;</span>.<span class="me1">begin</span><span class="br0">&#40;</span><span class="br0">&#41;</span>; i != adj<span class="br0">&#91;</span>s<span class="br0">&#93;</span>.<span class="me1">end</span><span class="br0">&#40;</span><span class="br0">&#41;</span>; ++i<span class="br0">&#41;</span></div></li><li><div class="de1">        <span class="br0">&#123;</span></div></li><li class="li2"><div class="de2">            <span class="kw1">if</span><span class="br0">&#40;</span>!visited<span class="br0">&#91;</span>*i<span class="br0">&#93;</span><span class="br0">&#41;</span></div></li><li><div class="de1">            <span class="br0">&#123;</span></div></li><li><div class="de1">                dis<span class="br0">&#91;</span>*i<span class="br0">&#93;</span>=dis<span class="br0">&#91;</span>s<span class="br0">&#93;</span>+<span class="nu0">1</span>;</div></li><li><div class="de1">                visited<span class="br0">&#91;</span>*i<span class="br0">&#93;</span> = <span class="kw2">true</span>;</div></li><li><div class="de1">                queue.<span class="me1">push_back</span><span class="br0">&#40;</span>*i<span class="br0">&#41;</span>;</div></li><li class="li2"><div class="de2">            <span class="br0">&#125;</span><span class="kw1">else</span><span class="br0">&#123;</span></div></li><li><div class="de1">                <span class="kw1">if</span><span class="br0">&#40;</span>dis<span class="br0">&#91;</span>s<span class="br0">&#93;</span>%<span class="nu0">2</span> == dis<span class="br0">&#91;</span>*i<span class="br0">&#93;</span>%<span class="nu0">2</span><span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">                    <span class="kw1">return</span> <span class="kw2">false</span>;</div></li><li><div class="de1">                <span class="br0">&#125;</span></div></li><li><div class="de1">            <span class="br0">&#125;</span></div></li><li class="li2"><div class="de2">        <span class="br0">&#125;</span></div></li><li><div class="de1">    <span class="br0">&#125;</span></div></li><li><div class="de1">    <span class="kw1">return</span> <span class="kw2">true</span>;</div></li><li><div class="de1"><span class="br0">&#125;</span></div></li><li><div class="de1">&nbsp;</div></li><li class="li2"><div class="de2"><span class="kw4">int</span> main<span class="br0">&#40;</span><span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">&nbsp;</div></li><li>    </li><li><div class="de1">    ll <span class="kw4">int</span> T, N, E, i;</div></li><li><div class="de1">    ll <span class="kw4">int</span> temp1, temp2;</div></li><li class="li2"><div class="de2">    <a href="http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html"><span class="kw3">scanf</span></a><span class="br0">&#40;</span><span class="st0">"%lld"</span>,&amp;T<span class="br0">&#41;</span>;</div></li><li><div class="de1">&nbsp;</div></li><li><div class="de1">    ll <span class="kw4">int</span> scene = <span class="nu0">0</span>;</div></li><li><div class="de1">    <span class="kw1">while</span><span class="br0">&#40;</span>T--<span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">        scene++;</div></li><li class="li2"><div class="de2">        <a href="http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html"><span class="kw3">scanf</span></a><span class="br0">&#40;</span><span class="st0">"%lld %lld"</span>,&amp;N,&amp;E<span class="br0">&#41;</span>;</div></li><li><div class="de1">&nbsp;</div></li><li><div class="de1">        Graph g<span class="br0">&#40;</span>N<span class="br0">&#41;</span>;</div></li><li><div class="de1">        <span class="kw1">for</span><span class="br0">&#40;</span>i=<span class="nu0">0</span>;i&lt;E;i++<span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">            <a href="http://www.opengroup.org/onlinepubs/009695399/functions/scanf.html"><span class="kw3">scanf</span></a><span class="br0">&#40;</span><span class="st0">"%lld %lld"</span>,&amp;temp1,&amp;temp2<span class="br0">&#41;</span>;</div></li><li class="li2"><div class="de2">&nbsp;</div></li><li><div class="de1">            g.<span class="me1">addEdge</span><span class="br0">&#40;</span>temp1-<span class="nu0">1</span>, temp2-<span class="nu0">1</span><span class="br0">&#41;</span>;</div></li><li><div class="de1">        <span class="br0">&#125;</span></div></li><li><div class="de1">&nbsp;</div></li><li><div class="de1">        <span class="kw4">bool</span> flag = <span class="kw2">true</span>;</div></li><li class="li2"><div class="de2">        <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">"Scenario #%d:<span class="es0">\n</span>"</span>, scene<span class="br0">&#41;</span>;</div></li><li><div class="de1">        <span class="kw1">for</span><span class="br0">&#40;</span>i=<span class="nu0">0</span>;i&lt;N;i++<span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">            <span class="kw1">if</span><span class="br0">&#40;</span>g.<span class="me1">visited</span><span class="br0">&#91;</span>i<span class="br0">&#93;</span><span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">                <span class="kw1">continue</span>;</div></li><li><div class="de1">            <span class="br0">&#125;</span></div></li><li class="li2"><div class="de2">            <span class="kw1">if</span><span class="br0">&#40;</span>!g.<span class="me1">BFS</span><span class="br0">&#40;</span>i<span class="br0">&#41;</span><span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">                <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">"Suspicious bugs found!<span class="es0">\n</span>"</span><span class="br0">&#41;</span>;</div></li><li><div class="de1">                flag = <span class="kw2">false</span>;</div></li><li><div class="de1">                <span class="kw2">break</span>;</div></li><li><div class="de1">            <span class="br0">&#125;</span></div></li><li class="li2"><div class="de2">        <span class="br0">&#125;</span></div></li><li><div class="de1">        <span class="kw1">if</span><span class="br0">&#40;</span>flag<span class="br0">&#41;</span><span class="br0">&#123;</span></div></li><li><div class="de1">            <a href="http://www.opengroup.org/onlinepubs/009695399/functions/printf.html"><span class="kw3">printf</span></a><span class="br0">&#40;</span><span class="st0">"No suspicious bugs found!<span class="es0">\n</span>"</span><span class="br0">&#41;</span>;</div></li><li><div class="de1">        <span class="br0">&#125;</span></div></li><li><div class="de1">    <span class="br0">&#125;</span></div></li><li class="li2">    </li><li><div class="de1">    <span class="kw1">return</span> <span class="nu0">0</span>;</div></li><li><div class="de1"><span class="br0">&#125;</span> </div></li></ol></pre></body></html>